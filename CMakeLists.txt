# This is the main interface to build a TITANIA package.
#
# Use `cmake -S . -B ./build` to configure the project. If available, you can instead
# use the curses gui `ccmake` or the full `cmake-gui` to change individual project
# settings, as well as supplying them directly on the command line, for example: `cmake
# -S . -B ./build -DCMAKE_BUILD_TYPE=Release`.
#
# Use 'cmake --build ./build' to build the project's libraries and the target binary.
#
# TODO how to run tests?

cmake_minimum_required(VERSION 3.15)

project(TITANIA CXX)

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

include(cmake/StandardProjectSettings.cmake)
include(cmake/PreventInSourceBuilds.cmake)

# Link this 'library' to set the c++ standard / compile-time options requested
add_library(project_options INTERFACE)
target_compile_features(project_options INTERFACE cxx_std_17)

# Link this 'library' to use the warnings specified in CompilerWarnings.cmake
add_library(project_warnings INTERFACE)

# enable cache system
include(cmake/Cache.cmake)

# Add linker configuration
include(cmake/Linker.cmake)
configure_linker(project_options)

# standard compiler warnings
include(cmake/CompilerWarnings.cmake)
set_project_warnings(project_warnings)

# sanitizer options if supported by compiler
include(cmake/Sanitizers.cmake)
enable_sanitizers(project_options)

# enable doxygen
include(cmake/Doxygen.cmake)
enable_doxygen()

# allow for static analysis options
include(cmake/StaticAnalyzers.cmake)

option(BUILD_SHARED_LIBS "Enable compilation of shared libraries" OFF)
option(ENABLE_TESTING "Enable (Unit) Test Builds" OFF)
option(ENABLE_FUZZING "Enable Fuzzing Builds" OFF)

# option(ENABLE_CONAN "Use Conan for dependency management" OFF)
#
# if(ENABLE_CONAN)
#
# include(cmake/Conan.cmake)
#
# run_conan()
#
# endif()

# using fuzzing sanitizer https://www.llvm.org/docs/LibFuzzer.html
#
# if(ENABLE_FUZZING)
#
# message("Building Fuzz Tests.")
#
# add_subdirectory(fuzz_test)
#
# endif()

# set TITANIA version information here, the header version.hpp is autogenerated during
# the build process from the version.hpp.in file
set(PROJECT_VERSION_MAJOR 1)
set(PROJECT_VERSION_MINOR 6)
set(PROJECT_VERSION_PATCH 46)
set(PROJECT_VERSION
    "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
cmake_host_system_information(RESULT ${PROJECT_NAME}_COMP_HOST QUERY HOSTNAME)
configure_file(include/version.hpp.in include/version.hpp)

set(3RDPARTY_DIR ${CMAKE_BINARY_DIR}/3rdparty)

option(${PROJECT_NAME}_BUILD_3RDPARTY_NLOPT
       "Download and automatically build 3rdparty NLopt package" OFF)
if(${PROJECT_NAME}_BUILD_3RDPARTY_NLOPT)
  include(3rdparty_NLopt)
endif()

option(${PROJECT_NAME}_BUILD_3RDPARTY_EIGEN3
       "Download and automatically build 3rdparty Eigen3 package" OFF)
if(${PROJECT_NAME}_BUILD_3RDPARTY_EIGEN3)
  include(3rdparty_Eigen3)
endif()

option(${PROJECT_NAME}_BUILD_3RDPARTY_LAPACKE
       "Download and automatically build 3rdparty CBLAS/LAPACKE package" OFF)
if(${PROJECT_NAME}_BUILD_3RDPARTY_LAPACKE)
  include(3rdparty_OpenBLAS)
endif()

add_subdirectory(src)

option(${PROJECT_NAME}_BUILD_3RDPARTY_CPPUNIT
       "Download and automatically build 3rdparty package CPPUnit" OFF)

if(ENABLE_TESTING)
  enable_testing()
  add_subdirectory(unit)
endif()
