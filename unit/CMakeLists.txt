project(TITANIA_UNIT_TEST CXX)

add_executable(${PROJECT_NAME} src/main.cpp)
add_definitions(-DTITANIA_UNIT_TESTS_DIR__="${CMAKE_CURRENT_BINARY_DIR}")

set(UNIT_TEST_SRCS
    src/AtomTest.cpp
    src/FragmentTest.cpp
    src/LinAlgTest.cpp
    src/phobosTest.cpp
    src/RedundantInternalsTest.cpp
    src/RemovePlanarityTest.cpp
    src/SimplexTest.cpp
    src/StructureSimulatorTest.cpp)
target_sources(${PROJECT_NAME} PRIVATE ${UNIT_TEST_SRCS} src/StanIPC.cpp)
# adding a TestCase for each file in unit/src/*Test.cpp this only works if a) each
# TestCase correctly registers with the TestSuite (for example:
# `CPPUNIT_TEST_SUITE_REGISTRATION(AtomTest);`) and b) each file has the correct
# coresponding name (AtomTest.cpp has to be the file where that TestCase is declared).
foreach(TEST ${UNIT_TEST_SRCS})
  get_filename_component(TEST_NAME ${TEST} NAME_WE)
  add_test(NAME ${TEST_NAME} COMMAND ${PROJECT_NAME} ${TEST_NAME})
endforeach(TEST)

target_include_directories(
  ${PROJECT_NAME}
  PRIVATE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
          $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/plugins/phobos/include>
          $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/3rdparty/include>
          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
          $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/systems>)

set(3RDPARTY_DIR ${CMAKE_BINARY_DIR}/3rdparty)

target_link_libraries(${PROJECT_NAME} PRIVATE project_warnings project_options)
target_link_libraries(${PROJECT_NAME} PRIVATE titania_lib)
target_link_libraries(${PROJECT_NAME} PRIVATE Parser)
target_link_libraries(${PROJECT_NAME} PRIVATE phobos)
target_link_libraries(${PROJECT_NAME} PRIVATE ${NLOPT_LIBRARIES})
if(TITANIA_BUILD_3RDPARTY_LAPACKE)
  target_link_libraries(${PROJECT_NAME} PRIVATE LAPACKE::LAPACKE)
else()
  target_link_libraries(${PROJECT_NAME} PRIVATE lapacke)
  target_link_libraries(${PROJECT_NAME} PRIVATE ${BLAS_LIBRARIES})
endif()
if(BLA_STATIC)
  target_link_libraries(titania_lib PRIVATE gfortran)
endif()

if(${PROJECT_NAME}_BUILD_3RDPARTY_CPPUNIT)
  include(3rdparty_CPPunit)
  add_dependencies(${PROJECT_NAME} project_cppunit)
else()
  include(FindPkgConfig)
  pkg_check_modules(CPPUNIT REQUIRED cppunit)
endif()

target_include_directories(${PROJECT_NAME}
                           PRIVATE $<BUILD_INTERFACE:${CPPUNIT_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PRIVATE ${CPPUNIT_LIBRARIES})

# the input files for the test suite are autogenerated from the files in the
# /standard_inputs/ directory.
set(STANDARD_INPUTS_DIR ${CMAKE_SOURCE_DIR}/standard_inputs)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/systems/stan)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/systems/stan/keywords.stan
               ${CMAKE_CURRENT_BINARY_DIR}/systems/stan COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/systems/wigner_deviation.stan
               ${CMAKE_CURRENT_BINARY_DIR}/systems COPYONLY)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/systems/cppunit_input.tna.in
               ${CMAKE_CURRENT_BINARY_DIR}/systems/cppunit_input.tna)
