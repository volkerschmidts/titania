#!/usr/bin/env python3

import sys
import numpy as np
import matplotlib.pyplot as plt
from parse_titania_out import parse_tna_out, ParseInfoTNA


def rmsd_argument_parser(argv):
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--input",
        "-i",
        nargs="+",
        default=[],
        help="Input file name. This is by default the "
        "<file.tna.out> output file generated by TITANIA.",
        required=True,
    )
    parser.add_argument(
        "--output", "-o", nargs=1, default=None, help="Prefix for the output files.",
    )
    parser.add_argument(
        "--silent",
        "-s",
        action="store_true",
        help="Prevents command line output of plot script.",
    )
    parser.add_argument(
        "--ylimits",
        "-y",
        default="5,105",
        help="Saves the minimal kappa value (-y=<val>) or comma separated "
        "limits for kappa (-y=<val_min>,<val_max>).",
    )
    parser.add_argument(
        "--xlimits",
        "-x",
        default=None,
        help="Saves the minimal eigenvalue (-x=<val>) or comma separated "
        "limits for the eigenvalues (-x=<val_min>,<val_max>).",
    )
    parser.add_argument(
        "--large",
        "-l",
        action="store_true",
        help="Increases the font size."
    )
    return parser.parse_args(argv)


def calculate_rmsd_of_files(tnafiles, info, args) -> None:
    rmsds=[]
    for file in tnafiles:
        rmsds.append(calculate_rmsds_of_individual_file(file, info, args))
    return rmsds


def plot_rmsds(tnafiledata,rmsds) -> None:

    for tnafile, data in zip(tnafiledata, rmsds):
        title=tnafile['Title']
        pdf_title=''.join([title, '.rmsd.pdf'])
        fig = plt.figure()
        plt.yscale("log")
        plt.plot(data[0], label='inter iteration')
        plt.plot(data[1], label='initial structure')
        plt.legend(loc='upper left')
        plt.xlabel("Iteration")
        plt.ylabel("rmsd / \AA")
        fig.tight_layout()
        fig.savefig(pdf_title, bbox_inches="tight")


def calculate_rmsds_of_individual_file(tnafile, info, args) -> None:
    coordinates=tnafile['Coordinates']
    initial_coordinates=np.array(coordinates[0])
    previous_coordinates=initial_coordinates
    reference_rmsd=[]
    previous_rmsd=[]
    for index, current_coordinates_list in enumerate(coordinates[1:]):
        iteration=index+1
        current_coordinates=np.array(current_coordinates_list)
        displacement=calculate_displacement_vectors(current_coordinates,initial_coordinates)
        reference_rmsd.append(displacement_to_rmsd(displacement))
        displacement = calculate_displacement_vectors(current_coordinates, previous_coordinates)
        previous_rmsd.append(displacement_to_rmsd(displacement))
        previous_coordinates=current_coordinates
    return (previous_rmsd, reference_rmsd)


def calculate_displacement_vectors(coordinates, reference):
    displacement=[]
    for vec_1, vec_2 in zip(coordinates, reference):
        displacement.append(vec_1 - vec_2)
    return displacement


def displacement_to_rmsd(displacement):
    rmsd=0.0
    for vector in displacement:
        for coefficient in vector:
            rmsd += coefficient**2

    return np.sqrt(rmsd/len(displacement))


def main(argv):
    args = rmsd_argument_parser(argv)
    info = None

    tnafiledata = []
    for input in args.input:
        tnafiledata.append(parse_tna_out(input, args.silent, ParseInfoTNA("Coordinates")))

    rmsds=calculate_rmsd_of_files(tnafiledata, info, args)
    plot_rmsds(tnafiledata,rmsds)


if __name__ == "__main__":
    main(sys.argv[1:])
