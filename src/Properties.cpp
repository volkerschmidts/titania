
#include <Atom.hpp>
#include <Declarations.hpp>
#include <Properties.hpp>
#include <iostream>

#define FIRST_PSE_PERIODE_   2
#define SECOND_PSE_PERIODE_  10
#define THIRD_PSE_PERIODE_   18
#define FORTH_PSE_PERIODE_   36
#define FIFTH_PSE_PERIODE_   55
#define SIXTH_PSE_PERIODE_   86
#define SEVENTH_PSE_PERIODE_ 118


/* Based off of IUPAC Green Book,  3rd Edition, 2nd Printing, Sep 2012.
 * Table 6.3  "Properties of Nuclides", p121 following.
 *
 * maybe update with data from:
 * Isotopic abundance from https://doi.org/10.1515/pac-2015-0503
 * Isotopic masses from http://dx.doi.org/10.1088/1674-1137/36/12/003
 */
/* z, A (mass number of isotope), abundancy (isotope-amount fraction), mass
 * (/u), magnetic moment (/mu_N), nuclear spin */

struct NucleusList nuclei[] = {
    {0, 0, 0.0, 0.0, 0.0, 0.0, 0.0},

    {1, 1, 1.00782503207, 99.9885, 0.5, 2.79284734, 0.0},
    {1, 2, 2.0141017779, 0.00015, 1.0, 0.857438228, 0.286},
    {1, 3, 3.0160492777, 0.0, 0.5, 2.97896244, 0.0},

    {2, 3, 3.0160293191, 0.000134, 0.5, -2.12749772, 0.0},
    {2, 4, 4.00260325415, 99.999866, 0.0, 0.0, 0.0},

    {3, 6, 6.015122795, 7.59, 1.0, 0.8220473, -0.082},
    {3, 7, 7.01600455, 92.41, 1.5, 3.256427, -4.06},

    {4, 9, 9.0121822, 100.0, 1.5, -1.177432, 5.29},

    {5, 10, 10.0129370, 19.9, 3.0, 1.80064478, 8.47},
    {5, 11, 11.0093054, 80.1, 1.5, 2.6886489, 4.07},

    {6, 12, 12.0, 98.93, 0.0, 0.0, 0.0},
    {6, 13, 13.0033548378, 1.07, 0.5, 0.7024118, 0.0},
    {6, 14, 14.003241989, 0.0, 0.0, 0.0, 0.0},

    {7, 14, 14.0030740048, 99.636, 1.0, 0.40376100, 2.001},
    {7, 15, 15.0001088982, 0.364, 0.5, -0.28318884, 0.0},

    {8, 16, 15.99491461956, 99.757, 0.0, 0.0, 0.0},
    {8, 17, 16.99913170, 0.038, 2.5, -1.89379, -2.578},
    {8, 18, 17.9991610, 0.205, 0.0, 0.0, 0.0},

    {9, 19, 18.99840322, 100.0, 0.5, 2.628868, 0.0},

    {10, 20, 19.9924401754, 90.48, 0.0, 0.0, 0.0},
    {10, 21, 20.99384668, 0.27, 1.5, -0.661797, 10.3},
    {10, 22, 21.991385114, 9.25, 0.0, 0.0, 0.0},

    {11, 23, 22.9897692809, 100.0, 1.5, 2.2176556, 10.45},

    {12, 24, 23.985041700, 78.99, 0.0, 0.0, 0.0},
    {12, 25, 24.98583692, 10.00, 2.5, -0.85545, 19.9},
    {12, 26, 25.982592929, 11.01, 0.0, 0.0, 0.0},

    {13, 27, 26.98153863, 100.0, 2.5, 3.6415069, 14.66},

    {14, 28, 27.9769265325, 92.223, 0.0, 0.0, 0.0},
    {14, 29, 28.976494700, 4.685, 0.5, -0.55529, 0.0},
    {14, 30, 29.97377017, 3.092, 0.0, 0.0, 0.0},

    {15, 31, 30.97376163, 100.0, 0.5, 1.1316, 0.0},

    {16, 32, 31.97207100, 94.99, 0.0, 0.0, 0.0},
    {16, 33, 32.97145876, 0.75, 1.5, 0.6438212, -6.4},
    {16, 34, 33.96786690, 4.25, 0.0, 0.0, 0.0},
    {16, 35, 35.96708076, 0.01, 0.0, 0.0, 0.0},

    {17, 35, 34.96885268, 75.76, 1.5, 0.8218743, 8.50},
    {17, 37, 36.96590259, 24.24, 1.5, 0.6841236, -6.44},

    {18, 36, 35.967545106, 0.3365, 0.0, 0.0, 0.0},
    {18, 38, 37.9627324, 0.0632, 0.0, 0.0, 0.0},
    {18, 40, 39.9623831225, 99.6003, 0.0, 0.0, 0.0},

    {19, 39, 38.96370668, 93.2581, 1.5, 0.39147, 5.85},
    {19, 40, 39.96399848, 0.0117, 4.0, -1.298100, -7.3},
    {19, 41, 40.96182576, 6.7302, 1.5, 0.2148701, 7.11},

    {20, 40, 39.96259098, 96.941, 0.0, 0.0, 0.0},
    {20, 42, 41.95861801, 0.647, 0.0, 0.0, 0.0},
    {20, 43, 42.9587666, 0.135, 3.5, -1.317643, -5.5},
    {20, 44, 43.9554818, 2.086, 0.0, 0.0, 0.0},
    {20, 46, 45.9536926, 0.004, 0.0, 0.0, 0.0},
    {20, 48, 47.952534, 0.187, 0.0, 0.0, 0.0},

    {21, 45, 44.9559119, 100.0, 3.5, 4.756487, -15.6},

    {22, 46, 45.9526316, 8.25, 0.0, 0.0, 0.0},
    {22, 47, 46.9517631, 7.44, 2.5, -0.78848, 30.0},
    {22, 48, 47.9479463, 73.72, 0.0, 0.0, 0.0},
    {22, 49, 48.9478700, 5.41, 3.5, -1.10417, 24.7},
    {22, 50, 49.9447912, 5.18, 0.0, 0.0, 0.0},

    {23, 50, 49.9471585, 0.250, 3.0, 3.3456889, 21.0},
    {23, 51, 50.9439595, 99.750, 3.5, 5.1487057, -4.3},

    {24, 50, 49.9460442, 4.345, 0.0, 0.0, 0.0},
    {24, 52, 51.9405075, 83.789, 0.0, 0.0, 0.0},
    {24, 53, 52.9406494, 9.501, 1.5, -0.47454, 15.0},
    {24, 54, 53.9388804, 2.365, 0.0, 0.0, 0.0},

    {25, 55, 54.9380451, 100.0, 2.5, 3.46871790, 33.0},

    {26, 54, 53.9396105, 5.845, 0.0, 0.0, 0.0},
    {26, 56, 55.9349375, 91.754, 0.0, 0.0, 0.0},
    {26, 57, 56.9353940, 2.119, 0.5, 0.09062300, 0.0},
    {26, 58, 57.9332756, 0.282, 0.0, 0.0, 0.0},

    {27, 59, 58.9331950, 100.0, 3.5, 4.627, 41.0},

    {28, 58, 57.9353429, 68.0769, 0.0, 0.0, 0.0},
    {28, 60, 59.9307864, 26.2231, 0.0, 0.0, 0.0},
    {28, 61, 60.9310560, 1.1399, 1.5, -0.75002, 16.2},
    {28, 62, 61.9283451, 3.6345, 0.0, 0.0, 0.0},
    {28, 64, 63.9279660, 0.9256, 0.0, 0.0, 0.0},

    {29, 63, 62.9295975, 69.15, 1.5, 2.2273456, -21.1},
    {29, 65, 64.9277895, 30.85, 1.5, 2.38161, -19.5},

    {30, 64, 63.9291422, 48.268, 0.0, 0.0, 0.0},
    {30, 66, 65.9260334, 27.975, 0.0, 0.0, 0.0},
    {30, 67, 66.9271273, 4.102, 2.5, 0.8752049, 15.0},
    {30, 68, 67.9248442, 19.024, 0.0, 0.0, 0.0},
    {30, 70, 69.9253193, 0.631, 0.0, 0.0, 0.0},

    {31, 69, 68.9255736, 60.108, 1.5, 2.01659, 16.50},
    {31, 71, 70.9247013, 39.892, 1.5, 2.56227, 10.40},

    {32, 70, 69.9242474, 20.38, 0.0, 0.0, 0.0},
    {32, 72, 71.9220758, 27.31, 0.0, 0.0, 0.0},
    {32, 73, 72.9234589, 7.76, 4.5, -0.8794677, -17.0},
    {32, 74, 73.9211778, 36.72, 0.0, 0.0, 0.0},
    {32, 76, 75.9214026, 7.83, 0.0, 0.0, 0.0},

    {33, 75, 74.9215965, 100.0, 1.5, 1.43948, 30.0},

    {34, 74, 73.9224764, 0.89, 0.0, 0.0, 0.0},
    {34, 76, 75.9192136, 9.37, 0.0, 0.0, 0.0},
    {34, 77, 76.9199140, 7.63, 0.5, 0.5350422, 0.0},
    {34, 78, 77.9173091, 23.77, 0.0, 0.0, 0.0},
    {34, 80, 79.9165213, 49.61, 0.0, 0.0, 0.0},
    {34, 82, 81.9166994, 8.73, 0.0, 0.0, 0.0},

    {35, 79, 78.9183371, 50.69, 1.5, 2.106400, 31.8},
    {35, 81, 80.9162906, 49.31, 1.5, 2.270562, 26.6},

    {36, 78, 77.9203648, 0.355, 0.0, 0.0, 0.0},
    {36, 80, 79.9163790, 2.286, 0.0, 0.0, 0.0},
    {36, 82, 81.9134836, 11.593, 0.0, 0.0, 0.0},
    {36, 83, 82.914136, 11.500, 4.5, -0.970669, 25.9},
    {36, 84, 83.911507, 56.987, 0.0, 0.0, 0.0},
    {36, 86, 85.91061073, 17.279, 0.0, 0.0, 0.0},

    {37, 85, 84.911789738, 72.17, 2.5, 1.35298, 27.7},
    {37, 87, 86.909180527, 27.83, 1.5, 2.75131, 13.4},

    {38, 84, 83.913425, 0.56, 0.0, 0.0, 0.0},
    {38, 84, 85.9092602, 9.86, 0.0, 0.0, 0.0},
    {38, 84, 86.9088771, 7.00, 4.5, -1.0936030, 33.0},
    {38, 84, 87.9056121, 82.58, 0.0, 0.0, 0.0},

    {39, 89, 88.9058483, 100.0, 0.5, -0.1374154, 0.0},

    {40, 90, 89.9047044, 51.45, 0.0, 0.0, 0.0},
    {40, 91, 90.9056458, 11.22, 2.5, -1.30362, 17.6},
    {40, 92, 91.9050408, 17.15, 0.0, 0.0, 0.0},
    {40, 94, 93.9063152, 17.38, 0.0, 0.0, 0.0},
    {40, 96, 95.9082734, 2.80, 0.0, 0.0, 0.0},

    {41, 93, 92.9063781, 100.0, 4.5, 6.1705, -37.0},

    {42, 92, 91.906811, 14.77, 0.0, 0.0, 0.0},
    {42, 94, 93.9050883, 9.23, 0.0, 0.0, 0.0},
    {42, 95, 94.9058421, 15.90, 2.5, -0.9142, -2.2},
    {42, 96, 95.9046795, 16.68, 0.0, 0.0, 0.0},
    {42, 97, 96.9060215, 9.56, 2.5, -0.9335, 25.5},
    {42, 98, 97.9054082, 24.19, 0.0, 0.0, 0.0},
    {42, 100, 99.907477, 9.67, 0.0, 0.0, 0.0},

    {43, 98, 97.907216, 0.0, 0.0, 0.0, 0.0},

    {44, 96, 95.907598, 5.54, 0.0, 0.0, 0.0},
    {44, 98, 97.905287, 1.87, 0.0, 0.0, 0.0},
    {44, 99, 98.9059393, 12.76, 2.5, -0.641, 7.9},
    {44, 100, 99.9042195, 12.60, 0.0, 0.0, 0.0},
    {44, 101, 100.9055821, 17.06, 2.5, -0.719, 46.0},
    {44, 102, 101.9043493, 31.55, 0.0, 0.0, 0.0},
    {44, 104, 103.905433, 18.62, 0.0, 0.0, 0.0},

    {45, 103, 102.905504, 100.0, 0.5, -0.8840, 0.0},

    {46, 102, 101.905609, 1.02, 0.0, 0.0, 0.0},
    {46, 104, 103.904036, 11.14, 0.0, 0.0, 0.0},
    {46, 105, 104.905085, 22.33, 2.5, -0.642, 65.0},
    {46, 106, 105.903486, 27.33, 0.0, 0.0, 0.0},
    {46, 108, 107.903892, 26.46, 0.0, 0.0, 0.0},
    {46, 110, 109.905153, 11.72, 0.0, 0.0, 0.0},

    {47, 107, 106.905097, 51.839, 0.5, -0.11367965, 0.0},
    {47, 109, 108.904752, 48.161, 0.5, -0.1306906, 0.0},

    {48, 106, 105.906459, 1.25, 0.0, 0.0, 0.0},
    {48, 108, 107.904184, 0.89, 0.0, 0.0, 0.0},
    {48, 110, 109.9030021, 12.49, 0.0, 0.0, 0.0},
    {48, 111, 110.9041781, 12.80, 0.5, -0.5948861, 0.0},
    {48, 112, 111.9027578, 24.13, 0.0, 0.0, 0.0},
    {48, 113, 112.9044017, 12.22, 0.5, -0.6223009, 0.0},
    {48, 114, 113.9033585, 28.73, 0.0, 0.0, 0.0},
    {48, 116, 115.904756, 7.49, 0.0, 0.0, 0.0},

    {49, 113, 112.904058, 4.29, 4.5, 5.5289, 80.0},
    {49, 115, 114.903878, 95.71, 4.5, 5.5408, 81.0},

    {50, 112, 111.904818, 0.97, 0.0, 0.0, 0.0},
    {50, 114, 113.902779, 0.66, 0.0, 0.0, 0.0},
    {50, 115, 114.903342, 0.34, 0.5, -0.91883, 0.0},
    {50, 116, 115.901741, 14.54, 0.0, 0.0, 0.0},
    {50, 117, 116.902952, 7.68, 0.5, -1.00104, 0.0},
    {50, 118, 117.901603, 24.22, 0.0, 0.0, 0.0},
    {50, 119, 118.903308, 8.59, 0.5, -1.04728, 0.0},
    {50, 120, 119.9021947, 32.58, 0.0, 0.0, 0.0},
    {50, 122, 121.9034390, 4.63, 0.0, 0.0, 0.0},
    {50, 124, 123.9052739, 5.79, 0.0, 0.0, 0.0},

    {51, 121, 120.9038157, 57.21, 2.5, 3.3634, -36.0},
    {51, 123, 122.9042140, 42.79, 3.5, 2.5498, -49.0},

    {52, 120, 119.904020, 0.09, 0.0, 0.0, 0.0},
    {52, 122, 121.9030439, 2.55, 0.0, 0.0, 0.0},
    {52, 123, 122.9042700, 0.89, 0.5, -0.7369478, 0.0},
    {52, 124, 123.9028179, 4.74, 0.0, 0.0, 0.0},
    {52, 125, 124.9044307, 7.07, 0.5, -0.8884509, 0.0},
    {52, 126, 125.9033117, 18.84, 0.0, 0.0, 0.0},
    {52, 128, 127.9044631, 31.74, 0.0, 0.0, 0.0},
    {52, 130, 129.9062244, 34.08, 0.0, 0.0, 0.0},

    {53, 127, 126.904473, 100.0, 2.5, 2.81327, 72.0},

    {54, 124, 123.9058930, 0.0952, 0.0, 0.0, 0.0},
    {54, 126, 125.904274, 0.0890, 0.0, 0.0, 0.0},
    {54, 128, 127.9035313, 1.9102, 0.0, 0.0, 0.0},
    {54, 129, 128.9047794, 26.4006, 0.5, -0.777976, 0.0},
    {54, 130, 129.9035080, 4.0710, 0.0, 0.0, 0.0},
    {54, 131, 130.9050824, 21.2324, 1.5, 0.6915, -11.4},
    {54, 132, 131.9041535, 26.9086, 0.0, 0.0, 0.0},
    {54, 134, 133.9053945, 10.4357, 0.0, 0.0, 0.0},
    {54, 136, 135.907219, 8.8573, 0.0, 0.0, 0.0},

    {55, 133, 132.905451933, 100.0, 3.5, 2.582025, -0.355},

    {56, 130, 129.906320, 0.106, 0.0, 0.0, 0.0},
    {56, 132, 131.905061, 0.101, 0.0, 0.0, 0.0},
    {56, 134, 133.9045084, 2.417, 0.0, 0.0, 0.0},
    {56, 135, 134.9056886, 6.592, 1.5, 0.838627, 16.0},
    {56, 136, 135.9045759, 7.854, 0.0, 0.0, 0.0},
    {56, 137, 136.9058274, 11.232, 1.5, 0.93734, 24.5},
    {56, 138, 137.9052472, 71.698, 0.0, 0.0, 0.0},

    {57, 138, 137.907112, 0.090, 5.0, 3.713646, 45.0},
    {57, 139, 138.9063533, 99.910, 3.5, 2.7830455, 20.0},

    {58, 136, 135.907172, 0.185, 0.0, 0.0, 0.0},
    {58, 138, 137.905991, 0.251, 0.0, 0.0, 0.0},
    {58, 140, 139.9054387, 88.450, 0.0, 0.0, 0.0},
    {58, 142, 141.909244, 11.114, 0.0, 0.0, 0.0},

    {59, 141, 140.9076528, 100.0, 2.5, 4.2754, -7.7},

    {60, 142, 141.9077233, 27.2, 0.0, 0.0, 0.0},
    {60, 143, 142.9098143, 12.2, 3.5, -1.065, -6.0},
    {60, 144, 143.9100873, 23.8, 0.0, 0.0, 0.0},
    {60, 145, 144.9125736, 8.3, 3.5, -0.656, -31.4},
    {60, 146, 145.9131169, 17.2, 0.0, 0.0, 0.0},
    {60, 148, 147.916893, 5.7, 0.0, 0.0, 0.0},
    {60, 150, 149.920891, 5.6, 0.0, 0.0, 0.0},

    {61, 145, 144.912749, 0.0, 2.5, 0.0, 0.0},

    {62, 144, 143.911999, 3.07, 0.0, 0.0, 0.0},
    {62, 147, 146.9148979, 14.99, 3.5, -0.812, -26.1},
    {62, 148, 147.9148227, 11.24, 0.0, 0.0, 0.0},
    {62, 149, 148.9171847, 13.83, 3.5, -0.6677, 7.5},
    {62, 150, 149.9172755, 7.38, 0.0, 0.0, 0.0},
    {62, 152, 151.9197324, 26.75, 0.0, 0.0, 0.0},
    {62, 154, 153.9222093, 22.75, 0.0, 0.0, 0.0},

    {63, 151, 150.9198502, 47.81, 2.5, 3.4717, 83.0},
    {63, 153, 152.9212303, 52.19, 2.5, 1.5324, 222.0},

    {64, 152, 151.9197910, 0.20, 0.0, 0.0, 0.0},
    {64, 154, 153.9208656, 2.18, 0.0, 0.0, 0.0},
    {64, 155, 154.9226220, 14.80, 1.5, -0.2572, 127.0},
    {64, 156, 155.9221227, 20.47, 0.0, 0.0, 0.0},
    {64, 157, 156.9239601, 15.65, 1.5, -0.3373, 136.0},
    {64, 158, 157.9241039, 24.84, 0.0, 0.0, 0.0},
    {64, 160, 159.9270541, 21.86, 0.0, 0.0, 0.0},

    {65, 159, 158.9253468, 100.0, 1.5, 2.014, 143.2},

    {66, 156, 155.924283, 0.056, 0.0, 0.0, 0.0},
    {66, 158, 157.924409, 0.095, 0.0, 0.0, 0.0},
    {66, 160, 159.9251975, 2.329, 0.0, 0.0, 0.0},
    {66, 161, 160.9269334, 18.889, 2.5, -0.480, 247.7},
    {66, 162, 161.9267984, 25.475, 0.0, 0.0, 0.0},
    {66, 163, 162.9287312, 24.896, 2.5, 0.673, 265.0},
    {66, 164, 163.9291748, 28.260, 0.0, 0.0, 0.0},

    {67, 165, 164.9303221, 100.0, 3.5, 4.17, 358.0},

    {68, 162, 161.928778, 0.139, 0.0, 0.0, 0.0},
    {68, 164, 163.929200, 1.601, 0.0, 0.0, 0.0},
    {68, 166, 165.9302931, 33.503, 0.0, 0.0, 0.0},
    {68, 167, 166.9320482, 22.869, 3.5, -0.56385, 357.0},
    {68, 168, 167.9323702, 26.978, 0.0, 0.0, 0.0},
    {68, 170, 169.9354643, 14.910, 0.0, 0.0, 0.0},

    {69, 169, 168.9342133, 100.0, 0.5, -0.2310, 0.0},

    {70, 168, 167.933897, 0.13, 0.0, 0.0, 0.0},
    {70, 170, 169.9347618, 3.04, 0.0, 0.0, 0.0},
    {70, 171, 170.9363258, 14.28, 0.5, 0.49367, 0.0},
    {70, 172, 171.9363815, 21.83, 0.0, 0.0, 0.0},
    {70, 173, 172.9382108, 16.13, 2.5, -0.648, 280.0},
    {70, 174, 173.9388621, 31.83, 0.0, 0.0, 0.0},
    {70, 176, 175.9425717, 12.76, 0.0, 0.0, 0.0},

    {71, 175, 174.9407718, 97.41, 3.5, 2.2323, 349.0},
    {71, 176, 175.9426863, 2.59, 7.0, 3.162, 492.0},

    {72, 174, 173.940046, 0.16, 0.0, 0.0, 0.0},
    {72, 176, 175.9414086, 5.26, 0.0, 0.0, 0.0},
    {72, 177, 176.9432207, 18.60, 3.5, 0.7935, 337.0},
    {72, 178, 177.9436988, 27.28, 0.0, 0.0, 0.0},
    {72, 179, 178.9458161, 13.62, 4.5, -0.6409, 379.0},
    {72, 180, 179.9465500, 35.08, 0.0, 0.0, 0.0},

    {73, 180, 179.9474648, 0.012, 9.0, 0.0, 0.0},
    {73, 181, 180.9479958, 99.988, 3.5, 2.3705, 317.0},

    {74, 180, 179.946704, 0.12, 0.0, 0.0, 0.0},
    {74, 182, 181.9482042, 26.50, 0.0, 0.0, 0.0},
    {74, 183, 182.9502230, 14.31, 0.5, 0.11778476, 0.0},
    {74, 184, 183.9509312, 30.64, 0.0, 0.0, 0.0},
    {74, 186, 185.9543641, 28.43, 0.0, 0.0, 0.0},

    {75, 185, 184.9529550, 37.40, 2.5, 3.1871, 218.0},
    {75, 185, 186.9557531, 62.20, 2.5, 3.2197, 207.0},

    {76, 184, 183.9524891, 0.02, 0.0, 0.0, 0.0},
    {76, 186, 185.9538382, 1.59, 0.0, 0.0, 0.0},
    {76, 187, 186.9557505, 1.96, 0.5, 0.06465189, 0.0},
    {76, 188, 187.9558382, 13.24, 0.0, 0.0, 0.0},
    {76, 189, 188.9581475, 16.15, 1.5, 0.659933, 98.0},
    {76, 190, 189.9584470, 26.26, 0.0, 0.0, 0.0},
    {76, 192, 191.9614807, 40.78, 0.0, 0.0, 0.0},

    {77, 191, 190.9605940, 37.3, 1.5, 0.1507, 81.6},
    {77, 193, 192.9629264, 62.7, 1.5, 0.1637, 75.1},

    {78, 190, 189.959932, 0.014, 0.0, 0.0, 0.0},
    {78, 192, 191.9610380, 0.782, 0.0, 0.0, 0.0},
    {78, 194, 193.9626803, 32.967, 0.0, 0.0, 0.0},
    {78, 195, 194.9647911, 33.832, 0.5, 0.60952, 0.0},
    {78, 196, 195.9649515, 25.242, 0.0, 0.0, 0.0},
    {78, 198, 197.967893, 7.163, 0.0, 0.0, 0.0},

    {79, 197, 196.9665687, 100.0, 1.5, 0.145746, 54.7},

    {80, 196, 195.965833, 0.15, 0.0, 0.0, 0.0},
    {80, 198, 197.9667690, 9.97, 0.0, 0.0, 0.0},
    {80, 199, 198.9682799, 16.87, 0.5, 0.5058855, 0.0},
    {80, 200, 199.9683260, 23.10, 0.0, 0.0, 0.0},
    {80, 201, 200.9703023, 13.18, 1.5, -0.5602257, 38.0},
    {80, 202, 201.9706430, 29.86, 0.0, 0.0, 0.0},
    {80, 204, 203.9734939, 6.87, 0.0, 0.0, 0.0},

    {81, 203, 202.9723442, 29.52, 0.5, 1.62225787, 0.0},
    {81, 205, 204.9744275, 70.48, 0.5, 1.63821461, 0.0},

    {82, 204, 203.9730436, 1.4, 0.0, 0.0, 0.0},
    {82, 206, 205.9744653, 24.1, 0.0, 0.0, 0.0},
    {82, 207, 206.9758969, 22.1, 0.5, 0.592583, 0.0},
    {82, 208, 207.9766521, 52.4, 0.0, 0.0, 0.0},

    {83, 209, 208.9803987, 100.0, 4.5, 4.1103, -51.6},

    {84, 209, 208.9824304, 0.0, 0.5, 0.0, 0.0},

    {85, 210, 209.987148, 0.0, 0.0, 0.0, 0.0},

    {86, 222, 222.0175777, 0.0, 0.0, 0.0, 0.0},

    {87, 223, 223.0197359, 0.0, 1.5, 1.17, 117.0},

    {88, 226, 226.0254098, 0.0, 0.0, 0.0, 0.0},

    {89, 227, 227.0277521, 0.0, 1.5, 1.1, 170.0},

    {90, 232, 232.0380553, 100.0, 0.0, 0.0, 0.0},

    {91, 231, 231.0358840, 100.0, 1.5, 2.01, 0.0},

    {92, 233, 233.0396352, 0.0, 2.5, 0.59, 366.3},
    {92, 234, 234.0409522, 0.0054, 0.0, 0.0, 0.0},
    {92, 235, 235.0439299, 0.7204, 3.5, -0.38, 493.6},
    {92, 238, 238.0507882, 99.2742, 0.0, 0.0, 0.0},

    {93, 237, 237.0481734, 0.0, 2.5, 3.14, 386.6},

    {94, 244, 244.064204, 0.0, 0.0, 0.0, 0.0},

    {95, 243, 243.0613811, 0.0, 2.5, 1.503, 286.0},

    {96, 247, 247.070354, 0.0, 4.5, 0.36, 0.0},

    {97, 247, 247.070307, 0.0, 0.0, 0.0, 0.0},

    {98, 251, 251.079587, 0.0, 0.0, 0.0, 0.0},

    {99, 252, 252.082980, 0.0, 0.0, 0.0, 0.0},
    {99, 253, 253.0848247, 0.0, 3.5, 4.1, 670.0},

    {100, 257, 257.095105, 0.0, 0.0, 0.0, 0.0},

    {101, 258, 258.098431, 0.0, 0.0, 0.0, 0.0},

    {102, 259, 259.10103, 0.0, 0.0, 0.0, 0.0},

    {103, 262, 262.10963, 0.0, 0.0, 0.0, 0.0},

    {104, 261, 261.10877, 0.0, 0.0, 0.0, 0.0},

    {105, 262, 262.11408, 0.0, 0.0, 0.0, 0.0},

    {106, 263, 263.11832, 0.0, 0.0, 0.0, 0.0},

    {107, 264, 264.1246, 0.0, 0.0, 0.0, 0.0},

    {108, 265, 265.13009, 0.0, 0.0, 0.0, 0.0},

    {109, 268, 268.13873, 0.0, 0.0, 0.0, 0.0},

    {110, 271, 271.14606, 0.0, 0.0, 0.0, 0.0},

    {111, 272, 272.15362, 0.0, 0.0, 0.0, 0.0}};

/* Based off of the Table of "Standard Atomic Weights of the Elements 2005",
 * IUPAC Green Book, 3rd Edition, 2nd Printing, Sep 2012.
 *
 * Isotope averaged masses from http://dx.doi.org/10.1515/pac-2015-0305
 * in cases, where a range of standard atomic weights is given due to natural
 * variations in isotope composition, we use the arithmetic average of the two
 * values given.
 */
/* z, chemical symbol, isotopes (see NucleusList), averaged atomic mass,
 * NMR-default nucleus */
struct ElementList element[] = {
    {0, "unknown", {0}, 0.0, 0},
    {1, "H", {1, 2, 3}, 1.007975, 1},
    {2, "He", {3, 4}, 4.002602, 3},
    {3, "Li", {6, 7}, 6.9675, 7},
    {4, "Be", {9}, 9.0121831, 9},
    {5, "B", {10, 11}, 10.8135, 11},
    {6, "C", {12, 13, 14}, 12.0106, 13},
    {7, "N", {14, 15}, 14.006855, 15},
    {8, "O", {16, 17, 18}, 15.9994, 17},
    {9, "F", {19}, 18.998403163, 19},
    {10, "Ne", {20, 21, 22}, 20.1797, 21},
    {11, "Na", {23}, 22.98976928, 23},
    {12, "Mg", {24, 25, 26}, 24.3055, 25},
    {13, "Al", {27}, 26.9815385, 27},
    {14, "Si", {28, 29, 30}, 28.085, 29},
    {15, "P", {31}, 30.973761998, 31},
    {16, "S", {33}, 32.0675, 33},
    {17, "Cl", {35, 37}, 35.4515, 35},
    {18, "Ar", {36, 38, 40}, 39.948, 0},
    {19, "K", {39, 40, 41}, 39.0983, 39},
    {20, "Ca", {40, 42, 43, 44, 46, 48}, 40.078, 43},
    {21, "Sc", {45}, 44.955908, 45},
    {22, "Ti", {46, 47, 48, 49, 50}, 47.867, 47},
    {23, "V", {50, 51}, 50.9415, 51},
    {24, "Cr", {50, 52, 53, 54}, 51.9961, 53},
    {25, "Mn", {55}, 54.938044, 55},
    {26, "Fe", {54, 56, 57, 58}, 55.845, 57},
    {27, "Co", {59}, 58.933194, 59},
    {28, "Ni", {58, 60, 61, 62, 64}, 58.6934, 61},
    {29, "Cu", {63, 65}, 63.546, 63},
    {30, "Zn", {64, 66, 67, 68, 70}, 65.38, 67},
    {31, "Ga", {69, 71}, 69.723, 71},
    {32, "Ge", {70, 72, 73, 74, 76}, 72.630, 73},
    {33, "As", {75}, 74.921595, 75},
    {34, "Se", {74, 76, 77, 78, 80, 82}, 78.971, 77},
    {35, "Br", {79, 81}, 79.904, 79},
    {36, "Kr", {78, 80, 82, 83, 84, 86}, 83.798, 83},
    {37, "Rb", {85, 87}, 85.4678, 87},
    {38, "Sr", {84, 86, 87, 88}, 87.62, 87},
    {39, "Y", {89}, 88.90584, 89},
    {40, "Zr", {90, 91, 92, 94, 96}, 91.224, 91},
    {41, "Nb", {93}, 92.90637, 93},
    {42, "Mo", {95, 97}, 95.95, 95},
    {43, "Tc", {98}, 97.907, 98}, /* atomic weight set to mass of 98Tc */
    {44, "Ru", {96, 98, 99, 100, 101, 102, 104}, 101.07, 99},
    {45, "Rh", {103}, 102.90550, 103},
    {46, "Pd", {105}, 106.42, 105},
    {47, "Ag", {107, 109}, 107.8682, 109},
    {48, "Cd", {106, 108, 110, 111, 112, 113, 114, 116}, 112.414, 113},
    {49, "In", {113, 115}, 114.818, 115},
    {50,
     "Sn",
     {112, 114, 115, 116, 117, 118, 119, 120, 122, 124},
     118.710,
     119},
    {51, "Sb", {121, 123}, 121.760, 121},
    {52, "Te", {120, 122, 123, 124, 125, 126, 128, 130}, 127.60, 125},
    {53, "I", {127}, 126.90447, 127},
    {54, "Xe", {124, 126, 128, 129, 130, 131, 132, 134, 136}, 131.293, 129},
    {55, "Cs", {133}, 132.90545196, 133},
    {56, "Ba", {130, 132, 134, 135, 136, 137, 138}, 137.327, 137},
    {57, "La", {138, 139}, 138.90547, 139},
    {58, "Ce", {136, 138, 140, 142}, 140.116, 0},
    {59, "Pr", {141}, 140.90766, 141},
    {60, "Nd", {142, 143, 144, 145, 146, 148, 150}, 144.242, 143},
    {61, "Pm", {145}, 0.0, 0},
    {62, "Sm", {144, 147, 148, 149, 150, 152, 154}, 150.36, 149},
    {63, "Eu", {151, 153}, 151.964, 151},
    {64, "Gd", {152, 154, 155, 156, 157, 158, 160}, 157.25, 155},
    {65, "Tb", {159}, 158.92535, 159},
    {66, "Dy", {156, 158, 160, 161, 162, 163, 164}, 162.500, 161},
    {67, "Ho", {165}, 164.93033, 165},
    {68, "Er", {162, 164, 166, 167, 168, 170}, 167.259, 167},
    {69, "Tm", {169}, 168.93422, 169},
    {70, "Yb", {168, 170, 171, 172, 173, 174, 176}, 173.054, 171},
    {71, "Lu", {175, 176}, 174.9668, 175},
    {72, "Hf", {174, 176, 177, 178, 179, 180}, 178.49, 177},
    {73, "Ta", {180, 181}, 180.94788, 181},
    {74, "W", {180, 182, 183, 184, 186}, 183.84, 183},
    {75, "Re", {185, 187}, 186.207, 185},
    {76, "Os", {184, 186, 187, 188, 189, 190, 192}, 190.23, 187},
    {77, "Ir", {191, 193}, 192.217, 193},
    {78, "Pt", {190, 192, 194, 195, 196, 198}, 195.084, 195},
    {79, "Au", {197}, 196.966569, 197},
    {80, "Hg", {196, 198, 199, 200, 201, 202, 204}, 200.592, 199},
    {81, "Tl", {203, 205}, 204.3835, 205},
    {82, "Pb", {204, 206, 207, 208}, 207.2, 207},
    {83, "Bi", {209}, 208.98040, 209},
    {84, "Po", {209}, 0.0, 0},
    {85, "At", {210}, 0.0, 0},
    {86, "Rn", {222}, 0.0, 0},
    {87, "Fr", {223}, 0.0, 0},
    {88, "Ra", {226}, 0.0, 0},
    {89, "Ac", {227}, 0.0, 0},
    {90, "Th", {232}, 232.0377, 0},
    {91, "Pa", {231}, 231.03588, 231},
    {92, "U", {233, 234, 235, 238}, 238.02891, 235},
    {93, "Np", {237}, 0.0, 237},
    {94, "Pu", {244}, 0.0, 0},
    {95, "Am", {243}, 0.0, 243},
    {96, "Cm", {247}, 0.0, 247},
    {97, "Bk", {247}, 0.0, 0},
    {98, "Cf", {251}, 0.0, 0},
    {99, "Es", {252, 253}, 0.0, 253},
    {100, "Fm", {257}, 0.0, 0},
    {101, "Md", {258}, 0.0, 0},
    {102, "No", {259}, 0.0, 0},
    {103, "Lr", {262}, 0.0, 0},
    {104, "Rf", {261}, 0.0, 0},
    {105, "Db", {262}, 0.0, 0},
    {106, "Sg", {263}, 0.0, 0},
    {107, "Bh", {264}, 0.0, 0},
    {108, "Hs", {265}, 0.0, 0},
    {109, "Mt", {268}, 0.0, 0},
    {110, "Ds", {271}, 0.0, 0},
    {111, "Rg", {272}, 0.0, 0},
    {112, "Cn", {0}, 0.0, 0},
    {113, "Uut", {0}, 0.0, 0},
    {114, "Fl", {0}, 0.0, 0},
    {115, "Uup", {0}, 0.0, 0},
    {116, "Lv", {0}, 0.0, 0},
    {117, "Uus", {0}, 0.0, 0},
    {118, "Uuo", {0}, 0.0, 0}};

const int NumberOfNuclei   = sizeof(nuclei) / sizeof(*nuclei);
const int NumberOfElements = sizeof(element) / sizeof(*element);

bool
isElement(std::string e)
{
  for (int i = 0; i < NumberOfElements; i++)
  {
    if (!(e.compare(element[i].element)))
    {
      return true;
    }
  }
  return false;
}

int
findNucleusByName(Atom &inputAtom)
{
  bool elementFound         = false;
  std::string elementSymbol = inputAtom.getElement();
  for (int i = 0; i < NumberOfElements; ++i)
  {
    if (!(elementSymbol.compare(element[i].element)))
    {
      elementFound = true;
      if (!inputAtom.getA())
        inputAtom.setA(element[i].rdcdefaultnucleus);
      inputAtom.setZ(i);
      inputAtom.setMass(element[i].mass);
      if (loadNucleus(inputAtom, i, inputAtom.getA()))
        return 0;
      else
        return i;
    }
    if (elementFound)
      return 0;
  }
  return 1;
}

int
findNucleusByZ(Atom &inputAtom)
{
  if (!(inputAtom.getZ() == element[inputAtom.getZ()].z))
    return 0;
  inputAtom.setA(element[inputAtom.getZ()].rdcdefaultnucleus);
  inputAtom.setElement(element[inputAtom.getZ()].element);
  inputAtom.setMass(element[inputAtom.getZ()].mass);
  if (loadNucleus(inputAtom, inputAtom.getZ(), inputAtom.getA()))
    return 0;
  return 1;
}

int
loadNucleus(Atom &inputAtom, const int z, const int u)
{
  bool foundElement = false;
  for (int i = 0; i <= NumberOfNuclei; ++i)
  {
    if (z == nuclei[i].z)
    {
      foundElement = true;
      if (u == nuclei[i].A)
      {
        inputAtom.setNucleus(&nuclei[i]);
        inputAtom.setGamma();
        return 1;
      }
    }
    else
    {
      if (foundElement)
      {
        std::cerr << "Can't find the defined isotope " << inputAtom.getA()
                  << inputAtom.getElement()
                  << ".\n"
                     "Check function loadNucleus (...) and struct NucleusList "
                     "nuclei[]\n"
                     "in Properties.cpp\n";
        break;
      }
    }
  }
  return 0;
}

int
loadRDCNormFact(Atom &A1,
                Atom &A2,
                struct BasicInformation &baseInformation,
                struct Flags &flags)
{
  if (flags.normDmatrix)
  {
    double kappa, kappa_R3;
    double bondlength = 1.09; // 0.98;
    kappa = -(A1.getGamma() * A2.getGamma() * MU_0_ * H_BAR_) / (8 * PI_ * PI_);
    kappa_R3                    = kappa / pow(bondlength * pow(10, -10), 3);
    baseInformation.normFactRDC = kappa_R3;
  }
  else
  {
    baseInformation.normFactRDC = 1.0;
  }
  return 0;
}

unsigned int
getStandardBonds(Atom *a)
{
  int z = a->getZ(), p = 0;
  if (z / SEVENTH_PSE_PERIODE_)
    p = SEVENTH_PSE_PERIODE_;
  else if (z / SIXTH_PSE_PERIODE_)
    p = SIXTH_PSE_PERIODE_;
  else if (z / FIFTH_PSE_PERIODE_)
    p = FIFTH_PSE_PERIODE_;
  else if (z / FORTH_PSE_PERIODE_)
    p = FORTH_PSE_PERIODE_;
  else if (z / THIRD_PSE_PERIODE_)
    p = THIRD_PSE_PERIODE_;
  else if (z / SECOND_PSE_PERIODE_)
    p = SECOND_PSE_PERIODE_;
  else if (z / FIRST_PSE_PERIODE_)
    p = FIRST_PSE_PERIODE_;
  else if (z == 2 || z == 1)
    p = 0;
  else
    std::cerr << a->getIdentifier()
              << " has unknown periode in periodic table...\n";


  if (p)
  {
    if ((z - p) < 5)
      return z - p;
    else if ((z - p < 9))
      return (4 - (z - p) % 4);
    else
      return 2;
  }
  return abs(z - 2);
}

void
loadHybridisation(Atom *a)
{
  unsigned int sB = getStandardBonds(a);
  bool stand      = true;
  Hybridisation hybr;
  hybr = Hybridisation::undefined;
  if (sB != a->getNumberOfBonds())
    stand = false;

  switch (a->getZ())
  {
    case 1:
      if (!stand)
        break;
      hybr = Hybridisation::s;
      break;
    case 6:
      if (stand)
      {
        hybr = Hybridisation::sp3;
        break;
      }
      else
      {
        switch (a->getNumberOfBonds())
        {
          case 3:
            hybr = Hybridisation::sp2;
            break;
          case 2:
            hybr = Hybridisation::sp1;
            break;
          default:
            break;
        }
      }
      break;
    case 7:
      if (stand)
      {
        hybr = Hybridisation::sp3;
        break;
      }
      else
      {
        switch (a->getNumberOfBonds())
        {
          case 2:
            hybr = Hybridisation::sp2;
            break;
          case 4:
            hybr = Hybridisation::sp3;
            break;
          default:
            break;
        }
      }
      break;
    case 8:
      for (unsigned int i = 0; i < a->getNumberOfBonds(); ++i)
      {
        if (a->getBondpartner(i)->getHybridisation() == Hybridisation::sp2)
          stand = false;
      }
      if (stand)
      {
        hybr = Hybridisation::sp3;
        break;
      }
      else
      {
        switch (a->getNumberOfBonds())
        {
          case 1:
            hybr = Hybridisation::sp2;
            break;
          case 2:
            hybr = Hybridisation::sp2;
            break;
          default:
            break;
        }
      }
      break;
    case 9:
      hybr = Hybridisation::sp3;
      break;
    case 16: {
      switch (a->getNumberOfBonds())
      {
        case 2:
          hybr = Hybridisation::sp3;
          break;
        case 3:
          hybr = Hybridisation::coo;
          break;
        case 4:
          hybr = Hybridisation::coo;
          break;
        default:
          hybr = Hybridisation::undefined;
          break;
      }
    }
    break;
    case 17:
      hybr = Hybridisation::sp3;
      break;
    case 35:
      hybr = Hybridisation::sp3;
      break;
    case 53:
      hybr = Hybridisation::sp3;
      break;
    default:
      break;
  }
  if (hybr == Hybridisation::undefined)
  {
    std::cerr << "ERROR:\tHybridisation of " << a->getIdentifier()
              << " can not be determined...\nContact the developer... \n";
  }
  a->setHybridisation(hybr);
}
